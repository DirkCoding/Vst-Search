{"version":3,"sources":["serviceWorker.js","components/DropdownInstruments.js","components/App.js","components/GlobalStyle.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","DropdownInstruments","react_default","a","createElement","for","placeholder","default","libraryData","reduce","instrumentList","libraryItem","concat","sections","instrumentItem","indexOf","push","sort","b","map","instrument","Component","App","components_DropdownInstruments","createGlobalStyle","_templateObject","ReactDOM","render","Fragment","App_App","GlobalStyle","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"u7FAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,oDC/DlDC,mLA1BX,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOC,IAAI,qBAAX,yBACAH,EAAAC,EAAAC,cAAA,UAAQE,YAAY,wBAClBJ,EAAAC,EAAAC,cAAA,UAAQG,SAAO,GAAf,qBAEAC,EACGC,OACC,SAACC,EAAgBC,GAAjB,OACED,EAAeE,OAAOD,EAAYE,WACpC,IAEDJ,OAAO,SAACC,EAAgBI,GAGvB,OAFgD,IAA5CJ,EAAeK,QAAQD,IACzBJ,EAAeM,KAAKF,GACfJ,GACN,IACFO,KAAK,SAACd,EAAGe,GAAJ,OAAWf,EAAIe,GAAK,EAAI,IAC7BC,IAAI,SAAAC,GAAU,OACblB,EAAAC,EAAAC,cAAA,cAASgB,cArBWC,aC+BbC,mLAEjB,OAAOpB,EAAAC,EAAAC,cAACmB,EAAD,aAFsBF,+aClClBG,kBAAfC,KCKAC,IAASC,OACPzB,EAAAC,EAAAC,cAACF,EAAAC,EAAMyB,SAAP,KACE1B,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAD,OAEFC,SAASC,eAAe,SJUnB,SAAkBjD,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIiD,IAAIC,GAAwBzD,OAAOC,SAASyD,MACpDC,SAAW3D,OAAOC,SAAS0D,OAIvC,OAGF3D,OAAO4D,iBAAiB,OAAQ,WAC9B,IAAMvD,EAAK,GAAA8B,OAAMsB,GAAN,sBAEP3D,GAgEV,SAAiCO,EAAOC,GAEtCuD,MAAMxD,GACHK,KAAK,SAAAoD,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYzB,QAAQ,cAG5C/B,UAAUC,cAAc2D,MAAMzD,KAAK,SAAAC,GACjCA,EAAayD,aAAa1D,KAAK,WAC7BV,OAAOC,SAASoE,aAKpBjE,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAmD,CAAwBjE,EAAOC,GAI/BC,UAAUC,cAAc2D,MAAMzD,KAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,MIhC/BE","file":"static/js/main.ab48ec6e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react'\n// import styled from 'styled-components'\nimport libraryData from '../resources/library-data.json'\n/*import { array } from '@storybook/addon-knobs'*/\n\nclass DropdownInstruments extends Component {\n  render() {\n    return (\n      <div>\n        <label for=\"Instrument select\">Choose an instrument:</label>\n        <select placeholder=\"Choose an instrument\">\n          <option default>Select Instrument</option>\n          {// get list of instruments\n          libraryData\n            .reduce(\n              (instrumentList, libraryItem) =>\n                instrumentList.concat(libraryItem.sections),\n              []\n            )\n            .reduce((instrumentList, instrumentItem) => {\n              if (instrumentList.indexOf(instrumentItem) === -1)\n                instrumentList.push(instrumentItem)\n              return instrumentList\n            }, [])\n            .sort((a, b) => (a < b ? -1 : 1))\n            .map(instrument => (\n              <option>{instrument}</option>\n            ))}\n        </select>\n      </div>\n    )\n  }\n}\nexport default DropdownInstruments\n","import React, { Component } from 'react'\n// import styled from 'styled-components'\n// import { BrowserRouter as Router, Route, NavLink } from 'react-router-dom'\nimport DropdownInstruments from './DropdownInstruments'\n/*import Home from './Home'\nimport Config from './Config'*/\n\n/*const Wrapper = styled.section`\n  display: grid;\n  grid-template-rows: auto 50px;\n  height: 100vh;\n\n  nav {\n    display: flex;\n  }\n\n  a:any-link {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-decoration: none;\n    color: black;\n    width: 100%;\n    background: #efefef;\n\n    &:first-child {\n      border-right: 1px solid white;\n    }\n\n    &.active {\n      background: deeppink;\n      color: white;\n    }\n  }\n`*/\n\nexport default class App extends Component {\n  render() {\n    return <DropdownInstruments />\n  }\n}\n","import { createGlobalStyle } from 'styled-components'\n\nexport default createGlobalStyle`\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n`\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport * as serviceWorker from './serviceWorker'\n\nimport App from './components/App'\nimport GlobalStyle from './components/GlobalStyle'\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n    <GlobalStyle />\n  </React.Fragment>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}